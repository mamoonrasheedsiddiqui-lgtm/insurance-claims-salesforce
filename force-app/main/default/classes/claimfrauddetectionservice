/**
 * Service class for claim fraud detection logic
 *
 * @description Calculates internal and external fraud scores, flags high-risk claims, and integrates with external fraud detection API
 * @author Development Team
 * @date 2025-10-08
 */

public with sharing class ClaimFraudDetectionService {

   
    /**
     * Evaluate fraud risk for a list of claims (bulk-safe, partial success)
     *
     * @param claims List of Claim__c records to evaluate
     * @throws FraudDetectionException if fraud evaluation fails
     */

    public static void evaluateFraudRisk(List<Claim__c> claims) {
        Savepoint sp = Database.setSavepoint();
        try {
            // FLS check for update
            if (!Schema.sObjectType.Claim__c.isUpdateable()) {
                throw new ClaimValidationException('Insufficient permissions to update Claim__c records');
            }

            // Bulk-safe: collect claim IDs
            Set<Id> claimIds = new Set<Id>();
            for (Claim__c claim : claims) {
                claimIds.add(claim.Id);
            }

            // Query line items if needed (repository/data access pattern)
            // Map<Id, List<ClaimLineItem__c>> lineItemsByClaim = ClaimRepository.getLineItemsByClaimIds(claimIds);

            // Process claims in memory
            for (Claim__c claim : claims) {
                Integer internalScore = calculateInternalFraudScore(claim);
                claim.Fraud_Score__c = internalScore;

                Integer externalScore = callExternalFraudDetectionAPI(claim);
                claim.External_Fraud_Score__c = externalScore;

                Integer totalScore = internalScore + externalScore;
                claim.Is_High_Risk__c = (totalScore >= HIGH_RISK_THRESHOLD);
            }

            // Partial success pattern for DML
            Database.SaveResult[] results = Database.update(claims, false);
            List<ErrorLogService.ErrorLogEntry> errors = new List<ErrorLogService.ErrorLogEntry>();
            for (Integer i = 0; i < results.size(); i++) {
                if (!results[i].isSuccess()) {
                    errors.add(new ErrorLogService.ErrorLogEntry(
                        results[i].getErrors()[0].getMessage(),
                        claims[i].Id,
                        'ClaimFraudDetectionService.evaluateFraudRisk',
                        ErrorLogService.Severity.HIGH
                    ));
                }
            }
            if (!errors.isEmpty()) {
                ErrorLogService.logErrors(errors);
            }
        } catch (ClaimValidationException e) {
            Database.rollback(sp);
            ErrorLogService.logError(
                e,
                null,
                'ClaimFraudDetectionService.evaluateFraudRisk',
                ErrorLogService.Severity.HIGH
            );
            throw e;
        } catch (FraudDetectionException e) {
            Database.rollback(sp);
            ErrorLogService.logError(
                e,
                null,
                'ClaimFraudDetectionService.evaluateFraudRisk',
                ErrorLogService.Severity.HIGH
            );
            throw e;
        } catch (Exception e) {
            Database.rollback(sp);
            ErrorLogService.logError(
                e,
                null,
                'ClaimFraudDetectionService.evaluateFraudRisk',
                ErrorLogService.Severity.CRITICAL
            );
            throw new FraudDetectionException('Unexpected error during fraud evaluation: ' + e.getMessage(), e);
        }
    }


    /**
     * Calculate internal fraud score for a claim using business rules
     * @param claim Claim__c record
     * @return Integer fraud score
     */
    /**
     * Calculate internal fraud score for a claim using business rules
     * @param claim Claim__c record
     * @return Integer fraud score
     */
    private static Integer calculateInternalFraudScore(Claim__c claim) {
        Integer score = 0;
        // Business rule: High amount
        if (claim.Amount__c != null && claim.Amount__c > INTERNAL_AMOUNT_THRESHOLD) {
            score += INTERNAL_AMOUNT_SCORE;
        }
        // Business rule: Multiple claims
        if (claim.Number_of_Claims__c != null && claim.Number_of_Claims__c > MULTIPLE_CLAIMS_THRESHOLD) {
            score += MULTIPLE_CLAIMS_SCORE;
        }
        // Business rule: Old claim
        if (claim.Claim_Date__c != null && claim.Claim_Date__c < System.today().addDays(-OLD_CLAIM_DAYS)) {
            score += OLD_CLAIM_SCORE;
        }
        // TODO: Add more rules per docs/business-rules/fraud-detection-rules.md
        return score;
    }

    /**
     * Call external fraud detection API and return fraud score
     * @param claim Claim__c record
     * @return Integer external fraud score
     * @throws FraudDetectionException if callout fails
     */
    /**
     * Call external fraud detection API and return fraud score
     * @param claim Claim__c record
     * @return Integer external fraud score
     * @throws FraudDetectionException if callout fails
     */
    private static Integer callExternalFraudDetectionAPI(Claim__c claim) {
        Integer externalScore = 0;
        Integer retryCount = 0;
        Boolean success = false;
        Exception lastException;
        while (!success && retryCount < MAX_RETRY_ATTEMPTS) {
            try {
                // Validate input
                if (claim == null || claim.Id == null) {
                    throw new IntegrationException('Invalid claim input for fraud API');
                }

                HttpRequest req = new HttpRequest();
                req.setEndpoint(NAMED_CREDENTIAL + '/evaluate'); // Named Credential
                req.setMethod('POST');
                req.setHeader('Content-Type', 'application/json');
                req.setHeader('Accept', 'application/json');
                req.setTimeout(TIMEOUT_MS);

                Map<String, Object> payload = new Map<String, Object>{
                    'claimId' => claim.Id,
                    'amount' => claim.Amount__c,
                    'fraudScore' => claim.Fraud_Score__c
                };
                req.setBody(JSON.serialize(payload));

                Http http = new Http();
                HttpResponse res = http.send(req);

                IntegrationLogService.logCallout(
                    req,
                    res,
                    claim.Id,
                    'FraudDetectionAPI',
                    retryCount + 1,
                    0
                );

                if (res.getStatusCode() == 200) {
                    Map<String, Object> responseBody = (Map<String, Object>) JSON.deserializeUntyped(res.getBody());
                    externalScore = (Integer) responseBody.get('fraudScore');
                    success = true;
                } else {
                    lastException = new IntegrationException('Fraud API failed: ' + res.getStatusCode() + ' - ' + res.getBody());
                    retryCount++;
                }
            } catch (Exception e) {
                lastException = e;
                retryCount++;
            }
        }
        if (!success) {
            ErrorLogService.logError(
                lastException,
                claim != null ? claim.Id : null,
                'ClaimFraudDetectionService.callExternalFraudDetectionAPI',
                ErrorLogService.Severity.HIGH
            );
            throw new FraudDetectionException('External fraud detection API failed', lastException);
        }
        return externalScore;
    }

    // Constants
    private static final Integer HIGH_RISK_THRESHOLD = 80;
    private static final Integer INTERNAL_AMOUNT_THRESHOLD = 10000;
    private static final Integer INTERNAL_AMOUNT_SCORE = 30;
    private static final Integer MULTIPLE_CLAIMS_THRESHOLD = 3;
    private static final Integer MULTIPLE_CLAIMS_SCORE = 20;
    private static final Integer OLD_CLAIM_DAYS = 30;
    private static final Integer OLD_CLAIM_SCORE = 10;
    private static final Integer MAX_RETRY_ATTEMPTS = 2;
    private static final Integer TIMEOUT_MS = 30000;
    private static final String NAMED_CREDENTIAL = 'callout:FraudDetectionAPI';
}
/**
 * Custom exception for fraud detection errors
 */
public class FraudDetectionException extends Exception {
    public FraudDetectionException(String message) {
        super(message);
    }

    public FraudDetectionException(String message, Throwable cause) {
        super(message, cause);
    }
}   